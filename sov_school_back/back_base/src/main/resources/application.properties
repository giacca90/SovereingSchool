spring.application.name=back_base

server.port=8080

# Variables de entorno

variable.FRONT=${FRONT}
variable.BACK_BASE=${BACK_BASE}
variable.BACK_STREAM=${BACK_STREAM}
variable.BACK_CHAT=${BACK_CHAT}
variable.POSTGRES=${POSTGRES}


# Ruta absoluta al directorio que contiene los archivos estáticos (por ejemplo, las fotos)
static.resources.location=fotos:/home/matt/Escritorio/Proyectos/SovereingSchool/Fotos

# Conexion a postgreSQL
# Configuración del datasource
spring.datasource.url=jdbc:postgresql://${PostgreSQLDialect}
spring.datasource.username=postgres
spring.datasource.password=giacca90
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuración de Hibernate y JPA
# spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# Configuración de la unidad de persistencia
spring.jpa.properties.jakarta.persistence.jdbc.url=jdbc:postgresql://${POSTGRES}
spring.jpa.properties.jakarta.persistence.jdbc.user=postgres
spring.jpa.properties.jakarta.persistence.jdbc.password=giacca90
spring.jpa.properties.jakarta.persistence.jdbc.driver=org.postgresql.Driver
spring.jpa.properties.hibernate.format_sql=true

# Configuración limite de carga
spring.servlet.multipart.max-file-size=-1
spring.servlet.multipart.max-request-size=-1

# Configuración de SSL
server.ssl.key-store=../../keystore.p12
server.ssl.key-store-password=giacca90
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=myalias


security.jwt.private.key=f7a410dbd21a8445062bad71931c16643b6645345faec57b1ab2ec39d649613b
security.jwt.user.generator=AUTH0-JWT

# Configuración de OAuth2 para GitHub (variables de entorno)
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.github.client-name=GitHub

# Configuración de OAuth2 para Google (variables de entorno)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.client-name=Google